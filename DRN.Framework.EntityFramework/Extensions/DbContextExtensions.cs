using DRN.Framework.EntityFramework.Context;
using DRN.Framework.SharedKernel.Domain;
using DRN.Framework.Utils.Extensions;
using Microsoft.EntityFrameworkCore;
using Npgsql;

namespace DRN.Framework.EntityFramework.Extensions;

internal static class DbContextExtensions
{
    public static void ModelCreatingDefaults(this DbContext dbContext, ModelBuilder modelBuilder)
    {
        var context = dbContext.GetType();
        modelBuilder.HasDefaultSchema(context.Name.ToSnakeCase())
            .ApplyConfigurationsFromAssembly(context.Assembly, type => type.Namespace!.Contains(context.Namespace!))
            .Ignore<DomainEvent>()
            .Ignore<IDomainEvent>();

        var baseEntityType = typeof(Entity);
        var entities = modelBuilder.Model.GetEntityTypes()
            .Where(type => baseEntityType.IsAssignableFrom(type.ClrType) && type.ClrType != baseEntityType) // Exclude base class itself
            .Select(e => modelBuilder.Entity(e.ClrType));

        foreach (var entity in entities)
        {
            // Autoconfigure common properties 
            entity.HasKey(nameof(Entity.Id));
            entity.Property(nameof(Entity.Id)) //value will be generated by SourceKnownIdGenerator
                .ValueGeneratedNever()
                .IsRequired();

            entity.Ignore(nameof(Entity.EntityId)); //runtime generated values by using source known id and entity type id
            entity.Ignore(nameof(Entity.EntityIdSource));

            entity.Property(nameof(Entity.ExtendedProperties))
                .HasColumnType("jsonb")
                .HasDefaultValueSql("'{}'::jsonb")
                .ValueGeneratedOnAdd()
                .IsRequired();
            
            //todo evaluate soft delete
        }
    }

    public static TContext CreateDbContext<TContext>(this string[] args) where TContext : DbContext
    {
        var connectionString = args.FirstOrDefault()!;
        var optionsBuilder = string.IsNullOrWhiteSpace(connectionString)
            ? DbContextConventions.UpdateDbContextOptionsBuilder<TContext>()
            : DbContextConventions.UpdateDbContextOptionsBuilder<TContext>(
                new NpgsqlDataSourceBuilder(connectionString).Build());

        return (TContext)Activator.CreateInstance(typeof(TContext), optionsBuilder.Options)!;
    }
}