namespace DRN.Test.Tests.DataAttributeTests;

public class DataInlineContextAttributeTests
{
    //Drn testing package helps you to create practical and effective unit and integration tests.
    //It is probably one of the best solution around
    //With TestContextData attribute TestContext and inlined data will be provided
    //Missing data's and dependencies will be inlined by AutoFixture and NSubstitute
    [Theory]
    [DataInlineContext(99)]
    public void TextContext_Should_Be_Created_From_TestContextData(TestContext context, int inlineData, Guid autoInlinedData, IMockable autoInlinedMockable)
    {
        var serviceCollection = context.ServiceCollection;
        //you can add services, modules defined in hosted app, application, infrastructure layer etc..
        serviceCollection.AddTransient<IMockable, ToBeRemovedService>();
        //you can override/replace existing services assume you added application services want to override its dependencies
        serviceCollection.ReplaceTransient<IMockable, ReplacingService>(new ReplacingService());
        //context and service provider will be disposed by xunit
        var serviceProvider = context.BuildServiceProvider();
        //Service provider behaviour demonstration
        serviceProvider.GetService<ToBeRemovedService>().Should().BeNull();
        serviceProvider.GetRequiredService<IMockable>().Should().BeOfType<ReplacingService>();

        //you can define and use custom appsettings.json, default settings are stored in ./settings/appsettings.json file by convention
        var appSettings = serviceProvider.GetRequiredService<IAppSettings>();
        appSettings.GetRequiredSection("AllowedHosts").Value.Should().Be("*");
        appSettings.TryGetSection("Bar", out _).Should().BeFalse();
        appSettings.GetRequiredConnectionString("Foo").Should().Be("Bar");
        appSettings.TryGetConnectionString("Bar", out _).Should().BeFalse();


        inlineData.Should().Be(99);
        //guid generated by AutoFixture
        autoInlinedData.Should().NotBeEmpty();
        //dependency mocked by NSubstitute
        autoInlinedMockable.Max.Returns(int.MinValue);
        autoInlinedMockable.Max.Should().Be(int.MinValue);
    }
}