@*
This file is licensed to you under the MIT license.
Source codes under this file is derived from https://github.com/dotnet/aspnetcore/blob/v9.0.0/src/Middleware/Diagnostics/src/DeveloperExceptionPage/
*@

@page
@using System.Reflection
@using DRN.Framework.Hosting.TagHelpers

@addTagHelper *, DRN.Framework.Hosting
@model DRN.Framework.Hosting.Areas.Developer.Pages.RuntimeExceptionPage

@{
    var errorModel = Model.ErrorModel;
    var location = string.Empty;
}

<!DOCTYPE html>

<html lang="en">
<head>
    <meta charset="utf-8"/>
    <title>@Model.ErrorModel.Title</title>
    <link rel="stylesheet" href="/_content/DRN.Framework.Hosting/css/error-page.zV47vUlk.css" integrity="sha256-zV47vUlkxcDUdosQxA55Wt8MdJotJU2yGWMx0dMUnIQ="/>
    <link rel="stylesheet" href="/_content/DRN.Framework.Hosting/jsoneditor/json-editor.myZBy9BE.css" integrity="sha256-myZBy9BExQ+5120XJzx+2vXF/1oxtQlXoX37Jf0IIGU="/>
    <link rel="stylesheet" href="/_content/DRN.Framework.Hosting/jsoneditor/json-editor-darktheme.Yy6r6Qb5.css" integrity="sha256-Yy6r6Qb5AmZc8EMbg2mHZRblQE/Fqf2sPQvlvwnbRmA="/>
    <script src="/_content/DRN.Framework.Hosting/jsoneditor/json-editor.DxnrBNd6.js" integrity="sha256-DxnrBNd6EAPEKWOoL43wMGYzdWsFUMuNYcUDl2feGSA="></script>

    <style>
        .jsoneditor {
            height: 70vh;
        }
    </style>
</head>
<body>
@{
    var httpProtocolWithScheme = $"{errorModel.RequestProtocol}({errorModel.RequestScheme})";
}
<h1>Unhandled Exception</h1>
<h1> @httpProtocolWithScheme @errorModel.RequestMethod @errorModel.RequestPath</h1>
@foreach (var errorDetail in errorModel.ErrorDetails)
{
    <div class="titleerror">
        @errorDetail.ExceptionType:
        @{
            await Output.WriteAsync(Model.HtmlEncodeAndReplaceLineBreaks(errorDetail.ExceptionMessage));
        }
    </div>

    var firstFrame = errorDetail.StackFrames.FirstOrDefault();
    if (firstFrame != null)
    {
        location = firstFrame.Function;
    }

    if (!string.IsNullOrEmpty(location) && firstFrame != null && !string.IsNullOrEmpty(firstFrame.File))
    {
        <p class="location">@location in <code title="@firstFrame.File">@System.IO.Path.GetFileName(firstFrame.File)</code>, line @firstFrame.Line</p>
    }
    else if (!string.IsNullOrEmpty(location))
    {
        <p class="location">@location</p>
    }
    else
    {
        <p class="location">Unknown Location</p>
    }

    if (errorDetail.Error is ReflectionTypeLoadException { LoaderExceptions.Length: > 0 } reflectionTypeLoadException)
    {
        <h3>Loader Exceptions:</h3>
        <ul>
            @foreach (var ex in reflectionTypeLoadException.LoaderExceptions)
            {
                <li>@ex!.Message</li>
            }
        </ul>
    }
}
<ul id="header">
    <li id="stack" tabindex="1" class="selected">
        Stack Frames
    </li>
    <li id="log" tabindex="2">
        Logs
    </li>
    <li id="routing" tabindex="3">
        Routing
    </li>
    <li id="cookies" tabindex="4">
        Cookies
    </li>
    <li id="headers" tabindex="5">
        Headers
    </li>
    <li id="querystring" tabindex="6">
        Query String
    </li>
    <li id="requestbody" tabindex="7">
        Request Body
    </li>
    <li id="configuration" tabindex="8">
        App Configuration
    </li>
</ul>

<div id="stackpage" class="page">
    <ul>
        @{
            var exceptionCount = 0;
            var stackFrameCount = 0;
        }
        @foreach (var errorDetail in errorModel.ErrorDetails)
        {
            exceptionCount++;
            var exceptionDetailId = "exceptionDetail" + exceptionCount;

            <li>
                <h2>@errorDetail.Error!.GetType().Name: @errorDetail.Error.Message</h2>
                <ul>
                    @foreach (var frame in errorDetail.StackFrames)
                    {
                        stackFrameCount++;
                        var frameId = "frame" + stackFrameCount;

                        <li class="frame" id="@frameId">
                            @if (string.IsNullOrEmpty(frame.File))
                            {
                                <h3>@frame.Function</h3>
                            }
                            else
                            {
                                <h3>@frame.Function in <code title="@frame.File">@System.IO.Path.GetFileName(frame.File)</code></h3>
                            }

                            @if (frame.Line != 0 && frame.ContextCode.Any())
                            {
                                <button class="expandCollapseButton" data-frameId="@frameId">+</button>
                                <div class="source">
                                    @if (frame.PreContextCode.Any())
                                    {
                                        <ol start="@frame.PreContextLine" class="collapsible">
                                            @foreach (var line in frame.PreContextCode)
                                            {
                                                <li><span>@line</span></li>
                                            }
                                        </ol>
                                    }

                                    <ol start="@frame.Line" class="highlight">
                                        @foreach (var line in frame.ContextCode)
                                        {
                                            <li><span>@line</span></li>
                                        }
                                    </ol>

                                    @if (frame.PostContextCode.Any())
                                    {
                                        <ol start='@(frame.Line + 1)' class="collapsible">
                                            @foreach (var line in frame.PostContextCode)
                                            {
                                                <li><span>@line</span></li>
                                            }
                                        </ol>
                                    }
                                </div>
                            }
                        </li>
                    }
                </ul>
            </li>
            <li>
                <br/>
                <div class="rawExceptionBlock">
                    <button class="showRawException" data-exceptionDetailId="@exceptionDetailId">Show raw exception details</button>
                    <div id="@exceptionDetailId" class="rawExceptionDetails">
                        <pre class="rawExceptionStackTrace">@errorDetail.Error.ToString()</pre>
                    </div>
                </div>
            </li>
        }
    </ul>
</div>

<div id="routingpage" class="page">
    <h2>Endpoint</h2>
    @if (errorModel.Endpoint != null)
    {
        <table>
            <thead>
            <tr>
                <th>Name Column</th>
                <th>Value Column</th>
            </tr>
            </thead>
            <tbody>
            <tr>
                <td>Endpoint Display Name</td>
                <td>@errorModel.Endpoint.DisplayName</td>
            </tr>
            @if (!string.IsNullOrEmpty(errorModel.Endpoint.RoutePattern))
            {
                <tr>
                    <td>Endpoint Route Pattern</td>
                    <td>@errorModel.Endpoint.RoutePattern</td>
                </tr>
            }
            @if (errorModel.Endpoint.Order != null)
            {
                <tr>
                    <td>Endpoint Route Order</td>
                    <td>@errorModel.Endpoint.Order</td>
                </tr>
            }
            @if (!string.IsNullOrEmpty(errorModel.Endpoint.HttpMethods))
            {
                <tr>
                    <td>Endpoint Route Http Method</td>
                    <td>@errorModel.Endpoint.HttpMethods</td>
                </tr>
            }
            </tbody>
        </table>
    }
    else
    {
        <p>No End point</p>
    }
    <h2>Metadata</h2>
    @if (errorModel.Endpoint?.MetadataCollection.Values.Length > 0)
    {
        <table>
            <thead>
            <tr>
                <th>Metadata Type Column</th>
                <th>Metadata Detail</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var metadata in errorModel.Endpoint.MetadataCollection.Values)
            {
                <tr>
                    <td>@metadata.Name</td>
                    <td>
                        @{
                            await Output.WriteAsync(Model.HtmlEncodeAndReplaceLineBreaks(metadata.Value));
                        }
                    </td>
                </tr>
            }
            </tbody>
        </table>
    }
    <h2>Route Values</h2>
    @if (errorModel.RouteValues.Any())
    {
        <table>
            <thead>
            <tr>
                <th>Variable Column</th>
                <th>Value Column</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var kv in errorModel.RouteValues.OrderBy(kv => kv.Key))
            {
                <tr>
                    <td>@kv.Key</td>
                    <td>@(kv.Value!)</td>
                </tr>
            }
            </tbody>
        </table>
    }
    else
    {
        <p>No Route Values</p>
    }
</div>

<div id="cookiespage" class="page">
    @if (errorModel.Cookies.Any())
    {
        <table>
            <thead>
            <tr>
                <th>Variable Column</th>
                <th>Value Column</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var kv in errorModel.Cookies.OrderBy(kv => kv.Key))
            {
                <tr>
                    <td>@kv.Key</td>
                    <td>@kv.Value</td>
                </tr>
            }
            </tbody>
        </table>
    }
    else
    {
        <p>No Cookie Data</p>
    }
</div>

<div id="headerspage" class="page">
    @if (errorModel.Headers.Any())
    {
        <table>
            <thead>
            <tr>
                <th>Variable Column</th>
                <th>Value Column</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var kv in errorModel.Headers.OrderBy(kv => kv.Key))
            {
                foreach (var v in kv.Value)
                {
                    <tr>
                        <td>@kv.Key</td>
                        <td>@v</td>
                    </tr>
                }
            }
            </tbody>
        </table>
    }
    else
    {
        <p>No Header Data</p>
    }
</div>

<div id="querystringpage" class="page">
    @if (errorModel.Query.Queries.Any())
    {
        <table>
            <thead>
            <tr>
                <th>Variable Column</th>
                <th>Value Column</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var kv in errorModel.Query.Queries.OrderBy(kv => kv.Key))
            {
                foreach (var v in kv.Value)
                {
                    <tr>
                        <td>@kv.Key</td>
                        <td>@v</td>
                    </tr>
                }
            }
            </tbody>
        </table>
    }
    else
    {
        <p>No Query String Data</p>
    }
</div>

<div id="requestbodypage" class="page">

    @if (string.IsNullOrEmpty(errorModel.RequestBody))
    {
        <p>No Request Body</p>
    }
    else
    {
        <p>@errorModel.RequestBody</p>
    }
</div>

@{
    var configurationDebugView = Model.ErrorModel.ConfigurationDebugViewSummary;
}
<div id="configurationpage" class="page">
    <table>
        <thead>
        <tr>
            <th>Application Name</th>
            <th>App Environment</th>
            <th>Config Mounted Directory</th>
        </tr>
        </thead>
        <tbody>
        <tr>
            <td>@configurationDebugView.ApplicationName</td>
            <td>@configurationDebugView.AppEnvironment.ToString()</td>
            <td>@(configurationDebugView.ConfigMountedDirectory ?? string.Empty)</td>
        </tr>
        </tbody>
    </table>
    <h2>Config Mounted Directory Json Files</h2>
    <table>
        <thead>
        <tr>
            <th>File Path</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var configPath in configurationDebugView.ConfigMountedDirectoryJsonFiles)
        {
            <tr>
                <td>@configPath</td>
            </tr>
        }
        </tbody>
    </table>
    <h2>Config Mounted Directory Key Per Files</h2>
    <table>
        <thead>
        <tr>
            <th>File Path</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var configPath in configurationDebugView.ConfigMountedDirectoryKeyPerFiles)
        {
            <tr>
                <td>@configPath</td>
            </tr>
        }
        </tbody>
    </table>
    <h2>Provider Settings</h2>
    @foreach (var providerSettings in configurationDebugView.SettingsByProvider)
    {
        <table>
            <thead>
            <tr>
                <th>Provider: @providerSettings.Key</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var setting in providerSettings.Value)
            {
                <tr>
                    <td>@setting</td>
                </tr>
            }
            </tbody>
        </table>
    }
</div>

<div id="logpage" class="page">
    @if (!errorModel.Logs.Any())
    {
        <p>No log</p>
    }
</div>

@if (errorModel.Logs.Any())
{
    <script>
        const container = document.getElementById("logpage")
        const options = {
            mode: 'code',
            onEditable: function (node) {
                if (!node.path) {
                    // In modes code and text, node is empty: no path, field, or value
                    // returning false makes the text area read-only
                    return false;
                }
            }
        }
        const editor = new JSONEditor(container, options)
        const initialJson = @Json.Serialize(errorModel.Logs);
        editor.set(initialJson)
    </script>
}

<script src="/_content/DRN.Framework.Hosting/js/error-page.DIqnWAVh.js" integrity="sha256-DIqnWAVhq/cvJidqpshbXovOhuFFX933WsJ1iZ88FG4="></script>
</body>
</html>